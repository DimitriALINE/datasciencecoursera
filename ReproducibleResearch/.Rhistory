getwd()
install.packages("swirl")
library(swirl)
swirl()
5+7
X<- 5+7
x <- 5 + 7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
MY8DIV
my_div
c(1,2,3,4) + C(0,10)
c(1, 2, 3, 4) + C(0, 10)
c(1, 2, 3, 4) + C(0, 10)
r <- c(1, 2, 3, 4)
t <- c(0, 10)
r+t
c(1,2,3,4) + c(0, 10)
c(1,2,3,4) + c(0, 10,100)
z * 2 + 1000
my_div
my_vector <- vector(1:20)
main()
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10,by=0.5)
seq(5,10, length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2),times = 10)
rep(c(0,1,2), each = 10)
2
MAIN5°
main()
x <- c(O.5,55,-10,6)
x <- c(0.5,55,-10,6)
?vector
vector( 0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "dimitri")
my_name
paste(my_name," ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y","Z"), sep = " ")
paste(1:3, c("X", "Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x<-c(44, NA, 5, NA)
X*3
X * 3
x <- c(44, NA, 5, NA)
X * 3
x * 3
y <- rnorm (1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
inf - inf
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
Y
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(x[3],x[5],x``)
c(x[3],x[5],x[7])
x[c(3, 5, 7)]
x[0]
X[3000]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
matrix(data = NA, nrow = 4, ncol = 5, byrow = FALSE,
dimnames = NULL)
matrix(data = 1:20, nrow = 4, ncol = 5, byrow = FALSE,
dimnames = NULL)
matrix(data = 1:20, nrow = 4, ncol = 5)
matrix(1:20, 1,1)
matrix(1:20, 4,5)
matrix(1:20, 5,4)
my_matrix2 <- matrix(1:20, 5,4)
my_matrix2 <- matrix(1:20,4,5)
identical (my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cmanes <- c("patient", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames <- cnames
colnames(my_data) <- cnames
my_data
EXIT5°
exit()
main()
ju
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
Sys.getenv('MYSQL_HOME')
install.packages("sqldf")
acs <- dbConnect(MySQL(), host="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
library(sqldf)
acs <- dbConnect(MySQL(), host="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
library(MySQL)
library(RMySQL)
setwd("C:/Users/dimitri/datasciencecoursera/ReproducibleResearch")
storm <- read.table("repdata-data-StormData.csv.bz2", sep = ",", header=TRUE)
library(dplyr)
storm <- select(stormbas,EVTYPE,FATALITIES,INJURIES,PROPDMG,PROPDMGEXP,CROPDMG,CROPDMGEXP,REMARKS)
storm$EVTYPE <- tolower(storm$EVTYPE)
library(stringr)
storm$EVTYPE <-str_trim(storm$EVTYPE)
x <- grep(("landslide|mudslide|mud|volcan|avalanche"),storm$EVTYPE)
for (i in x) {storm$EVTYPE[i] <- "landslide, avalanche or volcanic ash"}
x <- grep(("surf|tsunami|seiche|rip|surge|tide"),storm$EVTYPE)
for (i in x) {storm$EVTYPE[i] <- "sea wave and current"}
x <- grep(("drought|heat|dry|fire|dust|warmth|warm|record"),storm$EVTYPE)
for (i in x) {storm$EVTYPE[i] <- "heat and dryness"}
x <- grep(("winter storm|snow|blizzard|ice storm|sleet"),storm$EVTYPE)
for (i in x) {storm$EVTYPE[i] <- "winter storm and snow"}
x <- grep(("cold|ice|freez|frozen|frost|winter weather|chill|wintry|icy|glaze|low temperature|fog"),storm$EVTYPE)
for (i in x) {storm$EVTYPE[i] <- "cold and other winter weather"}
x <- grep(("flood|fld"),storm$EVTYPE)
for (i in x) {storm$EVTYPE[i] <- "flood"}
x <- grep(("rain|precipitation|precip"),storm$EVTYPE)
for (i in x) {storm$EVTYPE[i] <- "rain"}
x <- grep(("hail"),storm$EVTYPE)
for (i in x) {storm$EVTYPE[i] <- "hail"}
x <- grep(("tornado|waterspout|funnel"),storm$EVTYPE)
for (i in x) {storm$EVTYPE[i] <- "tornado"}
x <- grep(("hurricane|tropical|typhoon"),storm$EVTYPE)
for (i in x) {storm$EVTYPE[i] <- "hurricane"}
x <- grep(("thunderstorm|tstm|lightning"),storm$EVTYPE)
for (i in x) {storm$EVTYPE[i] <- "thunderstorm"}
x <- grep(("wind|winds"),storm$EVTYPE)
for (i in x) {storm$EVTYPE[i] <- "other wind storm"}
storm$EVTYPE <- as.factor(storm$EVTYPE)
storm <- filter(storm,EVTYPE == "other wind storm" | EVTYPE == "thunderstorm" | EVTYPE == "hurricane" | EVTYPE == "tornado" | EVTYPE == "hail" | EVTYPE == "rain"| EVTYPE == "flood" | EVTYPE == "cold and other winter weather" | EVTYPE == "winter storm and snow" | EVTYPE == "heat and dryness" | EVTYPE == "sea wave and current"| EVTYPE == "landslide, avalanche or volcanic ash")
sort(table(storm$EVTYPE))
stormhum <- filter(storm,FATALITIES != 0 | INJURIES != 0)
stormdmg <- filter(storm,PROPDMG != 0 | CROPDMG != 0)
stormhum <- select(stormhum,EVTYPE,FATALITIES,INJURIES,REMARKS)
stormdmg<- select(stormdmg,EVTYPE,PROPDMG,PROPDMGEXP,CROPDMG,CROPDMGEXP,REMARKS)
stormdmg$PROPDMGEXP <- tolower(stormdmg$PROPDMGEXP)
stormdmg$CROPDMGEXP <- tolower(stormdmg$CROPDMGEXP)
n <- length(stormdmg$PROPDMG)
table(stormdmg$PROPDMG)
stormext <- filter(stormdmg,PROPDMG > 999)
table(stormdmg$CROPDMG)
for (i in 1:n) {
if (stormdmg$PROPDMG[i] > 999) {stormdmg$PROPDMG[i] <- stormdmg$PROPDMG[i] / 1000}
}
for (i in 1:n) {
if (stormdmg$CROPDMG[i] > 999) {stormdmg$CROPDMG[i] <- stormdmg$CROPDMG[i] / 1000}
}
x <- grep(("k"),stormdmg$CROPDMGEXP)
for (i in x){stormdmg$CROPDMG[i] <- stormdmg$CROPDMG[i] * 1000}
x <- grep(("m"),stormdmg$CROPDMGEXP)
for (i in x){stormdmg$CROPDMG[i] <- stormdmg$CROPDMG[i] * 1000000}
x <- grep(("b"),stormdmg$CROPDMGEXP)
for (i in x){stormdmg$CROPDMG[i] <- stormdmg$CROPDMG[i] * 1000000000}
x <- grep(("k"),stormdmg$PROPDMGEXP)
for (i in x) {stormdmg$PROPDMG[i] <- stormdmg$PROPDMG[i] * 1000}
x <- grep(("m"),stormdmg$PROPDMGEXP)
for (i in x){stormdmg$PROPDMG[i] <- stormdmg$PROPDMG[i] * 1000000}
x <- grep(("b"),stormdmg$PROPDMGEXP)
for (i in x){stormdmg$PROPDMG[i] <- stormdmg$PROPDMG[i] * 1000000000}
table(stormdmg$PROPDMG)
stormext <- filter(stormdmg,PROPDMG > 10000000000)
View(stormext)
stormdmg$PROPDMG[stormdmg$PROPDMG == 1.150e+11] <- 115000000
table(stormdmg$CROPDMG)
stormext <- filter(stormdmg,CROPDMG > 5000000)
View(stormext)
stormhum <- summarize(group_by(stormhum,EVTYPE),sum(INJURIES),sum(FATALITIES))
stormdmg <- summarize(group_by(stormdmg,EVTYPE),sum(PROPDMG),sum(CROPDMG))
stormhum <- filter(storm,FATALITIES != 0 | INJURIES != 0)
stormdmg <- filter(storm,PROPDMG != 0 | CROPDMG != 0)
stormhum <- select(stormhum,EVTYPE,FATALITIES,INJURIES,REMARKS)
stormdmg<- select(stormdmg,EVTYPE,PROPDMG,PROPDMGEXP,CROPDMG,CROPDMGEXP,REMARKS)
stormdmg$PROPDMGEXP <- tolower(stormdmg$PROPDMGEXP)
stormdmg$CROPDMGEXP <- tolower(stormdmg$CROPDMGEXP)
n <- length(stormdmg$PROPDMG)
table(stormdmg$PROPDMG)
stormext <- filter(stormdmg,PROPDMG > 999)
table(stormdmg$CROPDMG)
for (i in 1:n) {
if (stormdmg$PROPDMG[i] > 999) {stormdmg$PROPDMG[i] <- stormdmg$PROPDMG[i] / 1000}
}
for (i in 1:n) {
if (stormdmg$CROPDMG[i] > 999) {stormdmg$CROPDMG[i] <- stormdmg$CROPDMG[i] / 1000}
}
x <- grep(("k"),stormdmg$CROPDMGEXP)
for (i in x){stormdmg$CROPDMG[i] <- stormdmg$CROPDMG[i] * 1000}
x <- grep(("m"),stormdmg$CROPDMGEXP)
for (i in x){stormdmg$CROPDMG[i] <- stormdmg$CROPDMG[i] * 1000000}
x <- grep(("b"),stormdmg$CROPDMGEXP)
for (i in x){stormdmg$CROPDMG[i] <- stormdmg$CROPDMG[i] * 1000000000}
x <- grep(("k"),stormdmg$PROPDMGEXP)
for (i in x) {stormdmg$PROPDMG[i] <- stormdmg$PROPDMG[i] * 1000}
x <- grep(("m"),stormdmg$PROPDMGEXP)
for (i in x){stormdmg$PROPDMG[i] <- stormdmg$PROPDMG[i] * 1000000}
x <- grep(("b"),stormdmg$PROPDMGEXP)
for (i in x){stormdmg$PROPDMG[i] <- stormdmg$PROPDMG[i] * 1000000000}
table(stormdmg$PROPDMG)
stormext <- filter(stormdmg,PROPDMG > 10000000000)
View(stormext)
stormdmg$PROPDMG[stormdmg$PROPDMG == 1.150e+11] <- 115000000
table(stormdmg$CROPDMG)
stormext <- filter(stormdmg,CROPDMG > 10000000)
()
stormext <- filter(stormdmg,CROPDMG > 50000000)
stormext <- filter(stormdmg,CROPDMG > 100000000)
stormext <- filter(stormdmg,CROPDMG > 1000000000)
stormext <- filter(stormdmg,CROPDMG > 500000000)
stormhum <- summarize(group_by(stormhum,EVTYPE),sum(INJURIES),sum(FATALITIES))
stormdmg <- summarize(group_by(stormdmg,EVTYPE),sum(PROPDMG),sum(CROPDMG))
colnames(stormhum) <- c("EVENTS","INJURIES","FATALITIES")
colnames(stormdmg) <- c("EVENTS","PropertyDamage","CropDamage")
color <- brewer.pal(12,"Set3")
library("RColorBrewer")
color <- brewer.pal(12,"Set3")
color
p1 = ggplot(stormhum, aes( x= factor(1), y = FATALITIES ,fill = factor(EVENTS)),aes( x= factor(1),coulour=color, y = FATALITIES ,fill = factor(EVENTS))) + geom_bar(width = 1,stat="identity") + coord_polar(theta = "y")
library("ggplot2")
library("grid")
library("gridExtra")
library("RColorBrewer")
p1 = ggplot(stormhum, aes( x= factor(1), y = FATALITIES ,fill = factor(EVENTS)),aes( x= factor(1),coulour=color, y = FATALITIES ,fill = factor(EVENTS))) + geom_bar(width = 1,stat="identity") + coord_polar(theta = "y")
p1
p1 = ggplot(stormhum, aes( x= factor(1), y = FATALITIES ,fill = factor(EVENTS)),aes( x= factor(1), y = FATALITIES ,fill = factor(EVENTS))) + geom_bar(width = 1,stat="identity",coulour=color) + coord_polar(theta = "y")
p1
p1 = ggplot(stormhum,coulour=color, aes( x= factor(1),coulour=color, y = FATALITIES ,fill = factor(EVENTS)),aes( x= factor(1), y = FATALITIES ,fill = factor(EVENTS))) + geom_bar(width = 1,stat="identity",coulour=color) + coord_polar(theta = "y",coulour=color)
p1 = ggplot(stormhum,coulour=color, aes( x= factor(1),coulour=color, y = FATALITIES ,fill = factor(EVENTS)),aes( x= factor(1), y = FATALITIES ,fill = factor(EVENTS))) + geom_bar(width = 1,stat="identity",coulour=color) + coord_polar(theta = "y")
p1
p1 = ggplot(stormhum,colour=color, aes( x= factor(1), y = FATALITIES ,fill = factor(EVENTS))) + geom_bar(width = 1,stat="identity") + coord_polar(theta = "y")
p1
p1 = ggplot(stormhum, aes( x= factor(1), y = FATALITIES ,fill = factor(EVENTS)),colour=color) + geom_bar(width = 1,stat="identity") + coord_polar(theta = "y")
p1
p1 = ggplot(stormhum, aes( x= factor(1), y = FATALITIES ,fill = factor(EVENTS)),colour=color) + geom_bar(width = 1,stat="identity",colour=color) + coord_polar(theta = "y")
p1
p1 = ggplot(stormhum, aes( x= factor(1), y = FATALITIES ,fill = factor(EVENTS))) + geom_bar(width = 1,stat="identity") + coord_polar(theta = "y")
p1
pal <- brewer.pal(12,"Set3")
p1 = ggplot(stormhum, aes( x= factor(1), y = FATALITIES ,fill = factor(EVENTS))) + geom_bar(width = 1,stat="identity",colour=pal) + coord_polar(theta = "y")
pal
p1
p1 = ggplot(stormhum, aes( x= factor(1), y = FATALITIES ,fill = factor(EVENTS))) + geom_bar(width = 1,stat="identity",fill = pal) + coord_polar(theta = "y")
p1
p1 = ggplot(stormhum, aes( x= factor(1), y = FATALITIES) + geom_bar(width = 1,stat="identity",fill = pal) + coord_polar(theta = "y")
p1 = ggplot(stormhum, aes( x= factor(1), y = FATALITIES)) + geom_bar(width = 1,stat="identity",fill = pal) + coord_polar(theta = "y")
p1 = ggplot(stormhum, aes( x= factor(1), y = FATALITIES)) + geom_bar(width = 1,stat="identity",fill = pal) + coord_polar(theta = "y")
p1
p1 = ggplot(stormhum, aes( x= factor(1), y = FATALITIES,fill = EVENTS)) + geom_bar(width = 1,stat="identity",fill = pal) + coord_polar(theta = "y")
p1
p1 = ggplot(stormhum, aes( x= factor(1), y = FATALITIES,fill = factor(EVENTS))) + geom_bar(width = 1,stat="identity",fill = pal) + coord_polar(theta = "y")
p1
p1 = ggplot(stormhum, aes( x= factor(1), y = FATALITIES, fill = factor(EVENTS))) + geom_bar(width = 1,stat="identity") + coord_polar(theta = "y")
p1
ggplot(stormhum, aes( x= factor(1), y = FATALITIES, fill = pal) + geom_bar(width = 1,stat="identity") + coord_polar(theta = "y") + labs(fill=factor(EVENTS))
ggplot(stormhum, aes( x= factor(1), y = FATALITIES, fill = pal) + geom_bar(width = 1,stat="identity") + coord_polar(theta = "y") + labs(fill=factor(EVENTS))
ggplot(stormhum, aes( x= factor(1), y = FATALITIES, fill = pal)) + geom_bar(width = 1,stat="identity") + coord_polar(theta = "y") + labs(fill=factor(EVENTS))
ggplot(stormhum, aes( x= factor(1), y = FATALITIES, fill = factor(EVENTS))) + geom_bar(width = 1,stat="identity") + coord_polar(theta = "y") + labs(fill=pal)
ggplot(stormhum, aes( x= factor(1), y = FATALITIES, fill = factor(EVENTS))) + geom_bar(width = 1,stat="identity") + coord_polar(theta = "y") + scale_fill_brewer(pal)
ggplot(stormhum, aes( x= factor(1), y = FATALITIES, fill = factor(EVENTS))) + geom_bar(width = 1,stat="identity") + coord_polar(theta = "y") + scale_fill_brewer(type = "qual", palette = "pal")
ggplot(stormhum, aes( x= factor(1), y = FATALITIES, fill = factor(EVENTS))) + geom_bar(width = 1,stat="identity") + coord_polar(theta = "y") + scale_fill_manual(pie)
ggplot(stormhum, aes( x= factor(1), y = FATALITIES, fill = factor(EVENTS))) + geom_bar(width = 1,stat="identity") + coord_polar(theta = "y") + scale_fill_manual(values = pal)
ggplot(stormhum, aes( x= factor(1), y = FATALITIES, fill = factor(EVENTS))) + geom_bar(width = 1,stat="identity") + coord_polar(theta = "y") + scale_fill_manual(values = pal) + labs(fill=Event)
ggplot(stormhum, aes( x= factor(1), y = FATALITIES, fill = factor(EVENTS))) + geom_bar(width = 1,stat="identity") + coord_polar(theta = "y") + scale_fill_manual(values = pal) + labs(fill="Event")
ggplot(stormhum, aes( x= factor(1), y = FATALITIES) + geom_bar(width = 1,stat="identity") + coord_polar(theta = "y") + scale_fill_manual(values = pal) + labs(fill="Event")
mm
ggplot(stormhum, aes( x= factor(1), y = FATALITIES) + geom_bar(width = 1,stat="identity")) + coord_polar(theta = "y") + scale_fill_manual(values = pal) + labs(fill="Event")
ggplot(stormhum, aes( x= factor(1), y = FATALITIES)) + geom_bar(width = 1,stat="identity") + coord_polar(theta = "y") + scale_fill_manual(values = pal) + labs(fill="Event")
ggplot(stormhum, aes( x= factor(1), y = FATALITIES)) + geom_bar(width = 1,stat="identity", fill = pal) + coord_polar(theta = "y") + scale_fill_manual(values = pal) + labs(fill="Event")
stormhum
ggplot(stormhum, aes( x= factor(1), y = FATALITIES)) + geom_bar(width = 1,stat="identity") + coord_polar(theta = "y") + scale_fill_manual(values = pal) + labs(fill="Event")
ggplot(stormhum, aes( x= factor(1), y = FATALITIES) + geom_bar(width = 1,stat="identity")) + coord_polar(theta = "y") + scale_fill_manual(values = pal) + labs(fill="Event")
ggplot(stormhum, aes( x= factor(1), y = FATALITIES)) + geom_bar(width = 1,stat="identity") + coord_polar(theta = "y") + scale_fill_manual(values = pal) + labs(fill="Event")
ggplot(stormhum, aes( x= factor(1), y = FATALITIES, fill = factor(EVENTS))) + geom_bar(width = 1,stat="identity") + coord_polar(theta = "y") + scale_fill_manual(values = pal) + labs(fill="Event")
ggplot(stormhum, aes( x= factor(1), y = FATALITIES)) + geom_bar(width = 1,stat="identity", fill = pal) + coord_polar(theta = "y") + scale_fill_manual(values = pal) + labs(fill="Event")
p1 = ggplot(stormhum, aes( x= factor(1), y = FATALITIES)) + geom_bar(width = 1,stat="identity", fill = pal) + coord_polar(theta = "y") + scale_fill_manual(values = pal)
p2 = ggplot(stormhum, aes( x= factor(1), y = FATALITIES, fill = factor(EVENTS))) + geom_bar(width = 1,stat="identity") + coord_polar(theta = "y") + scale_fill_manual(values = pal) + labs(fill="Event")
rid.arrange(p1, p2, ncol = 2, main = "Human Damage")
p1 = ggplot(stormhum, aes( x= factor(1), y = FATALITIES)) + geom_bar(width = 1,stat="identity", fill = pal) + coord_polar(theta = "y") + scale_fill_manual(values = pal)
p2 = ggplot(stormhum, aes( x= factor(1), y = FATALITIES, fill = factor(EVENTS))) + geom_bar(width = 1,stat="identity") + coord_polar(theta = "y") + scale_fill_manual(values = pal) + labs(fill="Event")
grid.arrange(p1, p2, ncol = 2, main = "Human Damage")
